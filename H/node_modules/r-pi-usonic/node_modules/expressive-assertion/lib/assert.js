'use strict';

var arraySlice       = Array.prototype.slice;
var functionToString = Function.prototype.toString;

var parseArgs = function (args, index) {
    return arraySlice.call(args, index).reduce(function (result, arg) {
        if (typeof arg === 'function') {
            result.predicates.push(arg);
        } else {
            result.message = arg;
        }

        return result;
    }, {
        message: null,
        predicates: []
    });
};

var reduceWhitespace = function (string) {
    return string.match(new RegExp('[^\r\n]+', 'g')).map(function (line) {
        return line.trim();
    }).join(' ');
};

var throwAssertionError = function (predicate, message, stackStartFunction) {
    if (!message) {
        message = 'assert(' + reduceWhitespace(functionToString.call(predicate)) + ')';
    }

    var error = new Error(message);

    error.name = 'AssertionError';

    if (typeof Error.captureStackTrace === 'function') {
        Error.captureStackTrace(error, stackStartFunction);
    }

    throw error;
};

var assert = function assert() {
    var args = parseArgs(arguments, 0);

    args.predicates.forEach(function (predicate) {
        if (!predicate()) {
            throwAssertionError(predicate, args.message, assert);
        }
    });
};

assert.throws = function throws(block) {
    var args   = parseArgs(arguments, 1);
    var thrown = false;

    try {
        block();
    } catch (exception) {
        thrown = true;

        args.predicates.forEach(function (predicate) {
            if (!predicate(exception)) {
                throwAssertionError(predicate, args.message, throws);
            }
        });
    }

    if (!thrown) {
        throwAssertionError(null, 'Missing expected exception.', throws);
    }
};

module.exports = assert;
